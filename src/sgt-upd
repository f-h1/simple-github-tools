#!/bin/bash

# Function to process a single directory
process_directory() {
    local project_path="$1"
    local commit_message="$2" # This might be empty if no message was provided

    # Reset all variables
    local repo_name=""
    local topics=""
    local description=""
    local website=""
    local visibility="private" # Default to private

    echo -e "\033[93mProcessing $project_path\033[0m"
    cd "$project_path" || {
        echo "Failed to enter $project_path"
        return
    } # Skip to next if this fails

    # Retrieve the repository name from the repo-name file
    if [ -f .sgt/repo-name ]; then
        repo_name=$(<.sgt/repo-name)
        repo_name=${repo_name// /-} # Replace spaces with hyphens
    else
        echo "No repo-name file found in $project_path, skipping..."
        return
    fi

    # Retrieve other repo information if available
    [ -f .sgt/repo-topic ] && topics=$(awk NF .sgt/repo-topic | tr '\n' ',' | sed 's/,$//')
    [ -f .sgt/repo-desc ] && description=$(<.sgt/repo-desc)
    [ -f .sgt/repo-web ] && website=$(<.sgt/repo-web)
    visibility="private" # Default to private
    [ -f .sgt/repo-visibility ] && visibility=$(<.sgt/repo-visibility)

    # Initialize Git repository if not already a Git repo
    if ! git rev-parse --git-dir >/dev/null 2>&1; then
        echo "$project_path is not a git repository. Initializing..."
        git init
    fi

    # Check if the repository exists on GitHub
    if ! gh repo view "$repo_name" >/dev/null 2>&1; then
        echo "Creating GitHub repository: $repo_name"
        gh repo create "$repo_name" --$visibility --source=. --remote=origin --description "$description" --homepage "$website" || {
            echo "Failed to create GitHub repo"
            return
        }
        echo "âœ“ Created repository $repo_name on GitHub"
    else
        echo "$repo_name already exists on GitHub, updating settings..."
        gh repo edit "$repo_name" --description "$description" --homepage "$website" --add-topic "$topics" --visibility "$visibility"
        echo "Updated repository settings for $repo_name on GitHub"
    fi

    # Add remote origin only if not existing
    if ! git remote get-url origin >/dev/null 2>&1; then
        git remote add origin git@github.com:$repo_name.git && echo "Successfully added remote origin"
    fi

    # Stage all changes
    git add .

    # Commit changes if there are any and a commit message was provided
    if ! git diff-index --quiet HEAD --; then
        if [ -n "$commit_message" ]; then
            local full_commit_message="$commit_message | utc $(date -u +"%Y-%m-%d %H:%M")"
            echo "$full_commit_message" >>changelog.md
            git commit -m "$full_commit_message"
        else
            git commit -m "Auto-commit on $(date -u +"%Y-%m-%d %H:%M")"
        fi
    fi

    # Push changes
    if ! git push -u origin $(git branch --show-current) 2>&1; then
        echo "Failed to push changes to GitHub"
    else
        echo "Changes successfully pushed to GitHub"
    fi
}

# Parse command line arguments for a commit message
commit_message=""
while getopts ":m:" opt; do
    case $opt in
    m)
        commit_message=$OPTARG
        ;;
    \?)
        echo "Invalid option: -$OPTARG" >&2
        exit 1
        ;;
    :)
        echo "Option -$OPTARG requires an argument." >&2
        exit 1
        ;;
    esac
done

# Remove the options processed by getopts
shift $((OPTIND - 1))

# Check if input is being piped
if [ ! -t 0 ]; then
    # Read directories from stdin
    while IFS= read -r project_path; do
        process_directory "$project_path" "$commit_message"
    done
else
    # Process directories given as arguments or default to current directory
    if [ "$#" -eq 0 ]; then
        process_directory "$(pwd)" "$commit_message"
    else
        # Process each directory provided as an argument
        for dir in "$@"; do
            process_directory "$dir" "$commit_message"
        done
    fi
fi
